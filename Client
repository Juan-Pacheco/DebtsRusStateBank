import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.InterruptedIOException;
import java.io.OutputStreamWriter;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketException;
import java.util.StringTokenizer;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.Timer;
import java.awt.BorderLayout;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import java.util.*;

public class Client {
	
	JFrame frame = new JFrame("Client");
	JButton setupButton = new JButton("Setup");
	JButton playButton = new JButton("Play");
	JButton pauseButton = new JButton("Pause");
	JButton closeButton = new JButton("Close");
	JPanel mainPanel = new JPanel();
	JLabel iconLabel = new JLabel();
	ImageIcon icon;
	
	//RTP variables:
	//----------------
	DatagramPacket rcvdp; //UDP packet received from the server
	DatagramSocket RTPsocket; //socket to be used to send and receive UDP packets
	static int RTP_RCV_PORT = 25000; //port where the client will receive the RTP packets
	  
	Timer timer; //timer used to receive data from the UDP socket
	byte[] buf; //buffer used to store data received from the server 
	 
	//RTSP variables
	//----------------
	//rtsp states 
	final static int INIT = 0;
	final static int READY = 1;
	final static int PLAYING = 2;
	static int state; //RTSP state == INIT or READY or PLAYING
	Socket RTSPsocket; //socket used to send/receive RTSP messages
	//input and output stream filters
	InetAddress ServerIPAddr;
	  
	static BufferedReader RTSPBufferedReader;
	static BufferedWriter RTSPBufferedWriter;
	static String VideoFileName; //video file to request to the server
	int RTSPSeqNb = 0; //Sequence number of RTSP messages within the session
	int RTSPid = 0; //ID of the RTSP session (given by the RTSP Server)

	//RTCP variables
	//----------------
	DatagramSocket RTCPsocket;          //UDP socket for sending RTCP packets
	static int RTCP_RCV_PORT = 19001;   //port where the client will receive the RTP packets
	static int RTCP_PERIOD = 400;       //How often to send RTCP packets
	RtcpSender rtcpSender;

	//Statistics variables:
	//------------------
	double dataRate;        //Rate of video data received in bytes/s
	int totalBytes;         //Total number of bytes received in a session
	double startTime;       //Time in milliseconds when start is pressed
	double totalPlayTime;   //Time in milliseconds of video playing since beginning
	float fractionLost;     //Fraction of RTP data packets from sender lost since the prev packet was sent
	int totalLost;            //Number of packets lost
	int expSeqNo;           //Expected Sequence number of RTP messages within the session
	int highestSeqNo;          //Highest sequence number received in session
	  
	final static String CRLF = "\r\n";

	//Video constant:
	static int MJPEG_TYPE = 26; //RTP payload type for MJPEG video
	
	/**
	 * Launch the application.
	 */
	public static void main(String argv[]) throws Exception{
		
		//Create a Client object
	    Client theClient = new Client();
	    String ServerHost = argv[0];
	    theClient.ServerIPAddr = InetAddress.getByName(ServerHost);
	    
	    //get server RTSP port and IP address from the command line
	    //------------------
	    int RTSP_server_port = Integer.parseInt(argv[1]);
	    InetAddress ServerIPAddr = InetAddress.getByName(ServerHost);

	    //get video filename to request:
	    VideoFileName = argv[2];

	    //Establish a TCP connection with the server to exchange RTSP messages
	    //------------------
	    theClient.RTSPsocket = new Socket(ServerIPAddr, RTSP_server_port);

	    //Set input and output stream filters:
	    RTSPBufferedReader = new BufferedReader(new InputStreamReader(theClient.RTSPsocket.getInputStream()) );
	    RTSPBufferedWriter = new BufferedWriter(new OutputStreamWriter(theClient.RTSPsocket.getOutputStream()) );

	    //init RTSP state:
	    state = INIT;
	}

	/**
	 * Create the application.
	 */
	public Client() {
		initialize();
	}

	private void initialize() {
		frame.setBounds(100, 100, 400, 360);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(new BorderLayout(0, 0));

		Box verticalBox = Box.createVerticalBox();
		frame.getContentPane().add(verticalBox, BorderLayout.SOUTH);
		
		Box horizontalBox = Box.createHorizontalBox();
		
		verticalBox.add(horizontalBox);	
		
		horizontalBox.add(setupButton);	
		horizontalBox.add(playButton);
		horizontalBox.add(pauseButton);	
		horizontalBox.add(closeButton);
		
		setupButton.addActionListener(new setupButtonListener());
	    playButton.addActionListener(new playButtonListener());
	    pauseButton.addActionListener(new pauseButtonListener());
	    closeButton.addActionListener(new closeButtonListener());
		
	  	iconLabel.setIcon(null);

	  	mainPanel.setLayout(null);
	  	mainPanel.add(iconLabel);

	  	iconLabel.setBounds(0,-60,580,400);
	  		
	  	frame.getContentPane().add(mainPanel, BorderLayout.CENTER);
	  	//frame.setSize(new Dimension(390,370));
	  	frame.setVisible(true);
		
		//init timer
	    //--------------------------
	    timer = new Timer(20, new timerListener());
	    timer.setInitialDelay(0);
	    timer.setCoalesce(true);

	    //allocate enough memory for the buffer used to receive data from the server
	    buf = new byte[15000];
	    
	    //init RTCP packet sender
        rtcpSender = new RtcpSender(400);
		
	}

	class setupButtonListener implements ActionListener{
	    public void actionPerformed(ActionEvent e){

	      System.out.println("Setup Button pressed !");      

	      if (state == INIT) {
	    	  //Init non-blocking RTPsocket that will be used to receive data
	    	  try{
	    		  //construct a new DatagramSocket to receive RTP packets from the server, on port RTP_RCV_PORT
	    		  RTPsocket = new DatagramSocket(RTP_RCV_PORT);
	    		  RTCPsocket = new DatagramSocket();
	    		  RTPsocket.setSoTimeout(5);
	    	  } catch (SocketException se){
		      System.out.println("Socket exception: "+se);
		      System.exit(0);
	    	  }

	    	  //init RTSP sequence number
	    	  RTSPSeqNb = 1;
		 
	    	  //Send SETUP message to the server
	    	  send_RTSP_request("SETUP");

	    	  //Wait for the response 
	    	  if (parse_server_response() != 200)
	    		  System.out.println("Invalid Server Response");
	    	  else{
	    		  //change RTSP state and print new state 
	    		  state = READY;
	    		  System.out.println("New RTSP state: READY");
	    	  }
	      }
	    }
	  }
	  
	  class playButtonListener implements ActionListener{
	    public void actionPerformed(ActionEvent e){

	      System.out.println("Play Button pressed !"); 

	      if(state == READY){
	    	  RTSPSeqNb++;

		  //Send PLAY message to the server
		  send_RTSP_request("PLAY");

		  //Wait for the response 
		  if(parse_server_response() != 200)
			  System.out.println("Invalid Server Response");
		  else{
		      //change RTSP state and print out new state
			  state = PLAYING;
		      System.out.println("New RTSP state: PLAYING");

		      timer.start();
              rtcpSender.startSend();
		  }
	      }
	    }
	  }


	  class pauseButtonListener implements ActionListener{
	    public void actionPerformed(ActionEvent e){

	      //System.out.println("Pause Button pressed !");   

	      if(state == PLAYING){
	    	  RTSPSeqNb++;

		  //Send PAUSE message to the server
		  send_RTSP_request("PAUSE");
		
		  //Wait for the response 
		 if (parse_server_response() != 200)
			  System.out.println("Invalid Server Response");
		  else{
		      //change RTSP state and print out new state
			  state = READY;
		      System.out.println("New RTSP state: READY");
		      
		      timer.stop();
              rtcpSender.stopSend();
		    }
		}
	    }
	  }

	  //Handler for Close button
	  //-----------------------
	  class closeButtonListener implements ActionListener{
	    public void actionPerformed(ActionEvent e){

	      //System.out.println("Close Button pressed !");  

	      //increase RTSP sequence number
	    	RTSPSeqNb++;
	      

	      //Send TEARDOWN message to the server
	      send_RTSP_request("TEARDOWN");

	      //Wait for the response 
	      if (parse_server_response() != 200)
	    	  System.out.println("Invalid Server Response");
	      else{     
		  //change RTSP state and print out new state
	    	  state = INIT;
	    	  System.out.println("New RTSP state: INIT");

		  timer.stop();
          rtcpSender.stopSend();

		  System.exit(0);
	      }
	    }
	  }

	  class timerListener implements ActionListener{
	    public void actionPerformed(ActionEvent e){
	      
	      //Construct a DatagramPacket to receive data from the UDP socket
	      rcvdp = new DatagramPacket(buf, buf.length);

	      try{
	    	  //receive the DP from the socket:
	    	  RTPsocket.receive(rcvdp);
		  
	    	  //create an RTPpacket object from the DP
	    	  RTPpacket rtp_packet = new RTPpacket(rcvdp.getData(), rcvdp.getLength());

	    	  //print important header fields of the RTP packet received: 
	    	  System.out.println("Got RTP packet with SeqNum # "+rtp_packet.getsequencenumber()+" TimeStamp "+rtp_packet.gettimestamp()+" ms, of type "+rtp_packet.getpayloadtype());
		
	    	  //print header bitstream:
	    	  //rtp_packet.printheader();

	    	  //get the payload bitstream from the RTPpacket object
	    	  int payload_length = rtp_packet.getpayload_length();
	    	  byte [] payload = new byte[payload_length];
	    	  rtp_packet.getpayload(payload);

	    	  //get an Image object from the payload bitstream
	    	  Toolkit toolkit = Toolkit.getDefaultToolkit();
	    	  Image image = toolkit.createImage(payload, 0, payload_length);
		
	    	  //display the image as an ImageIcon object
	    	  icon = new ImageIcon(image);	    
	    	  iconLabel.setIcon(icon);
	      }
	      catch (InterruptedIOException iioe){
	    	  System.out.println("Nothing to read");
	      }
	      catch (IOException ioe){
	    	  System.out.println("Exception caught: "+ioe);
	      }
	    }
	  }

	  class RtcpSender implements ActionListener{

	        private Timer rtcpTimer;
	        int interval;

	        // Stats variables
	        private int packetsExpected;    
	        private int packetsLost;        
	        private int lastHighestSeqNo;      
	        private int lastTotalLost;        
	        private float lastFractionLost; 

	        Random randomGenerator;         

	        public RtcpSender(int interval){
	            this.interval = interval;
	            rtcpTimer = new Timer(interval, this);
	            rtcpTimer.setInitialDelay(0);
	            rtcpTimer.setCoalesce(true);
	            randomGenerator = new Random();
	        }

	        public void run(){
	            System.out.println("RtcpSender Thread Running");
	        }

	        public void actionPerformed(ActionEvent e){

	            // Calculate the stats for this period
	            packetsExpected = highestSeqNo - lastHighestSeqNo;
	            packetsLost = totalLost - lastTotalLost;
	            lastFractionLost = packetsExpected == 0 ? 0f : (float)packetsLost / packetsExpected;
	            lastHighestSeqNo = highestSeqNo;
	            lastTotalLost = totalLost;

	            //To test lost feedback on lost packets
	            //lastFractionLost = randomGenerator.nextInt(10)/10.0f;

	            RTCPpacket rtcp_packet = new RTCPpacket(lastFractionLost, totalLost, highestSeqNo);
	            int packet_length = rtcp_packet.getlength();
	            byte[] packet_bits = new byte[packet_length];
	            rtcp_packet.getpacket(packet_bits);

	            try{
	                DatagramPacket dp = new DatagramPacket(packet_bits, packet_length, ServerIPAddr, RTCP_RCV_PORT);
	                RTCPsocket.send(dp);
	            }catch (InterruptedIOException iioe){
	                System.out.println("Nothing to read");
	            }catch (IOException ioe) {
	                System.out.println("Exception caught: "+ioe);
	            }
	        }

	        public void startSend(){
	            rtcpTimer.start();
	        }

	        public void stopSend(){
	            rtcpTimer.stop();
	        }
	    }
	  
	  private int parse_server_response(){
	    int reply_code = 0;

	    try{
	      //parse status line and extract the reply_code:
	      String StatusLine = RTSPBufferedReader.readLine();
	      System.out.println(StatusLine);
	    
	      StringTokenizer tokens = new StringTokenizer(StatusLine);
	      tokens.nextToken(); 
	      reply_code = Integer.parseInt(tokens.nextToken());
	      
	      if (reply_code == 200){
	    	  String SeqNumLine = RTSPBufferedReader.readLine();
	    	  System.out.println(SeqNumLine);
		  
	    	  String SessionLine = RTSPBufferedReader.readLine();
	    	  System.out.println(SessionLine);
		
	    	  tokens = new StringTokenizer(SessionLine);
	    	  tokens.nextToken();
	    	  RTSPid = Integer.parseInt(tokens.nextToken());
	      }
	    }catch(Exception ex){
	    	System.out.println("Exception caught: "+ex);
	    	System.exit(0);
	    }
	    return(reply_code);
	  }
	  
	  private void send_RTSP_request(String request_type){
	    try{

	      //write the request line:
	      RTSPBufferedWriter.write(request_type + " " + VideoFileName + " RTSP/1.0" + CRLF);

	      //write the CSeq line: 
	      RTSPBufferedWriter.write("CSeq: " + RTSPSeqNb + CRLF);

	      if (request_type == "SETUP"){
	          RTSPBufferedWriter.write("Transport: RTP/UDP; client_port= " + RTP_RCV_PORT + CRLF);
	      }
	      //otherwise, write the Session line from the RTSPid field
	      else{
	    	  RTSPBufferedWriter.write("Session: " + RTSPid + CRLF);
	      }

	      RTSPBufferedWriter.flush();
	    }
	    catch(Exception ex){
	    	System.out.println("Exception caught: "+ex);
	    	System.exit(0);
	    }
	  }
}
